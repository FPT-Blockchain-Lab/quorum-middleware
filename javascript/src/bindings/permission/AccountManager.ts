/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccountAccessModified = ContractEventLog<{
  _account: string;
  _orgId: string;
  _roleId: string;
  _orgAdmin: boolean;
  _status: string;
  0: string;
  1: string;
  2: string;
  3: boolean;
  4: string;
}>;
export type AccountAccessRevoked = ContractEventLog<{
  _account: string;
  _orgId: string;
  _roleId: string;
  _orgAdmin: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type AccountStatusChanged = ContractEventLog<{
  _account: string;
  _orgId: string;
  _status: string;
  0: string;
  1: string;
  2: string;
}>;

export interface AccountManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AccountManager;
  clone(): AccountManager;
  methods: {
    assignAccountRole(
      _account: string,
      _orgId: string,
      _roleId: string,
      _adminRole: boolean
    ): NonPayableTransactionObject<void>;

    removeExistingAdmin(_orgId: string): NonPayableTransactionObject<{
      voterUpdate: boolean;
      account: string;
      0: boolean;
      1: string;
    }>;

    getAccountDetails(_account: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    getNumberOfAccounts(): NonPayableTransactionObject<string>;

    getAccountOrgRole(_account: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    validateAccount(
      _account: string,
      _orgId: string
    ): NonPayableTransactionObject<boolean>;

    getAccountRole(_account: string): NonPayableTransactionObject<string>;

    updateAccountStatus(
      _orgId: string,
      _account: string,
      _action: number | string | BN
    ): NonPayableTransactionObject<void>;

    orgAdminExists(_orgId: string): NonPayableTransactionObject<boolean>;

    getAccountDetailsFromIndex(
      _aIndex: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    addNewAdmin(
      _orgId: string,
      _account: string
    ): NonPayableTransactionObject<boolean>;

    setDefaults(
      _nwAdminRole: string,
      _oAdminRole: string
    ): NonPayableTransactionObject<void>;

    assignAdminRole(
      _account: string,
      _orgId: string,
      _roleId: string,
      _status: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkOrgAdmin(
      _account: string,
      _orgId: string,
      _ultParent: string
    ): NonPayableTransactionObject<boolean>;

    getAccountStatus(_account: string): NonPayableTransactionObject<string>;
  };
  events: {
    AccountAccessModified(cb?: Callback<AccountAccessModified>): EventEmitter;
    AccountAccessModified(
      options?: EventOptions,
      cb?: Callback<AccountAccessModified>
    ): EventEmitter;

    AccountAccessRevoked(cb?: Callback<AccountAccessRevoked>): EventEmitter;
    AccountAccessRevoked(
      options?: EventOptions,
      cb?: Callback<AccountAccessRevoked>
    ): EventEmitter;

    AccountStatusChanged(cb?: Callback<AccountStatusChanged>): EventEmitter;
    AccountStatusChanged(
      options?: EventOptions,
      cb?: Callback<AccountStatusChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "AccountAccessModified",
    cb: Callback<AccountAccessModified>
  ): void;
  once(
    event: "AccountAccessModified",
    options: EventOptions,
    cb: Callback<AccountAccessModified>
  ): void;

  once(event: "AccountAccessRevoked", cb: Callback<AccountAccessRevoked>): void;
  once(
    event: "AccountAccessRevoked",
    options: EventOptions,
    cb: Callback<AccountAccessRevoked>
  ): void;

  once(event: "AccountStatusChanged", cb: Callback<AccountStatusChanged>): void;
  once(
    event: "AccountStatusChanged",
    options: EventOptions,
    cb: Callback<AccountStatusChanged>
  ): void;
}
