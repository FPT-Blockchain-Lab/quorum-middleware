/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NodeProposed = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeApproved = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeDeactivated = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeActivated = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeBlacklisted = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeRecoveryInitiated = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NodeRecoveryCompleted = ContractEventLog<{
  _enodeId: string;
  _ip: string;
  _port: string;
  _raftport: string;
  _orgId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface NodeManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NodeManager;
  clone(): NodeManager;
  methods: {
    updateNodeStatus(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _orgId: string,
      _action: number | string | BN
    ): NonPayableTransactionObject<void>;

    getNodeDetails(enodeId: string): NonPayableTransactionObject<{
      _orgId: string;
      _enodeId: string;
      _ip: string;
      _port: string;
      _raftport: string;
      _nodeStatus: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    addAdminNode(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _orgId: string
    ): NonPayableTransactionObject<void>;

    connectionAllowed(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    addOrgNode(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _orgId: string
    ): NonPayableTransactionObject<void>;

    addNode(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _orgId: string
    ): NonPayableTransactionObject<void>;

    getNodeDetailsFromIndex(
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<{
      _orgId: string;
      _enodeId: string;
      _ip: string;
      _port: string;
      _raftport: string;
      _nodeStatus: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    getNumberOfNodes(): NonPayableTransactionObject<string>;

    approveNode(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _orgId: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    NodeProposed(cb?: Callback<NodeProposed>): EventEmitter;
    NodeProposed(
      options?: EventOptions,
      cb?: Callback<NodeProposed>
    ): EventEmitter;

    NodeApproved(cb?: Callback<NodeApproved>): EventEmitter;
    NodeApproved(
      options?: EventOptions,
      cb?: Callback<NodeApproved>
    ): EventEmitter;

    NodeDeactivated(cb?: Callback<NodeDeactivated>): EventEmitter;
    NodeDeactivated(
      options?: EventOptions,
      cb?: Callback<NodeDeactivated>
    ): EventEmitter;

    NodeActivated(cb?: Callback<NodeActivated>): EventEmitter;
    NodeActivated(
      options?: EventOptions,
      cb?: Callback<NodeActivated>
    ): EventEmitter;

    NodeBlacklisted(cb?: Callback<NodeBlacklisted>): EventEmitter;
    NodeBlacklisted(
      options?: EventOptions,
      cb?: Callback<NodeBlacklisted>
    ): EventEmitter;

    NodeRecoveryInitiated(cb?: Callback<NodeRecoveryInitiated>): EventEmitter;
    NodeRecoveryInitiated(
      options?: EventOptions,
      cb?: Callback<NodeRecoveryInitiated>
    ): EventEmitter;

    NodeRecoveryCompleted(cb?: Callback<NodeRecoveryCompleted>): EventEmitter;
    NodeRecoveryCompleted(
      options?: EventOptions,
      cb?: Callback<NodeRecoveryCompleted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NodeProposed", cb: Callback<NodeProposed>): void;
  once(
    event: "NodeProposed",
    options: EventOptions,
    cb: Callback<NodeProposed>
  ): void;

  once(event: "NodeApproved", cb: Callback<NodeApproved>): void;
  once(
    event: "NodeApproved",
    options: EventOptions,
    cb: Callback<NodeApproved>
  ): void;

  once(event: "NodeDeactivated", cb: Callback<NodeDeactivated>): void;
  once(
    event: "NodeDeactivated",
    options: EventOptions,
    cb: Callback<NodeDeactivated>
  ): void;

  once(event: "NodeActivated", cb: Callback<NodeActivated>): void;
  once(
    event: "NodeActivated",
    options: EventOptions,
    cb: Callback<NodeActivated>
  ): void;

  once(event: "NodeBlacklisted", cb: Callback<NodeBlacklisted>): void;
  once(
    event: "NodeBlacklisted",
    options: EventOptions,
    cb: Callback<NodeBlacklisted>
  ): void;

  once(
    event: "NodeRecoveryInitiated",
    cb: Callback<NodeRecoveryInitiated>
  ): void;
  once(
    event: "NodeRecoveryInitiated",
    options: EventOptions,
    cb: Callback<NodeRecoveryInitiated>
  ): void;

  once(
    event: "NodeRecoveryCompleted",
    cb: Callback<NodeRecoveryCompleted>
  ): void;
  once(
    event: "NodeRecoveryCompleted",
    options: EventOptions,
    cb: Callback<NodeRecoveryCompleted>
  ): void;
}
