/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type RoleCreated = ContractEventLog<{
  _roleId: string;
  _orgId: string;
  _baseAccess: string;
  _isVoter: boolean;
  _isAdmin: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
  4: boolean;
}>;
export type RoleRevoked = ContractEventLog<{
  _roleId: string;
  _orgId: string;
  0: string;
  1: string;
}>;

export interface RoleManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RoleManager;
  clone(): RoleManager;
  methods: {
    getRoleDetails(
      _roleId: string,
      _orgId: string
    ): NonPayableTransactionObject<{
      roleId: string;
      orgId: string;
      accessType: string;
      voter: boolean;
      admin: boolean;
      active: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: boolean;
    }>;

    addRole(
      _roleId: string,
      _orgId: string,
      _baseAccess: number | string | BN,
      _isVoter: boolean,
      _isAdmin: boolean
    ): NonPayableTransactionObject<void>;

    getNumberOfRoles(): NonPayableTransactionObject<string>;

    getRoleDetailsFromIndex(
      _rIndex: number | string | BN
    ): NonPayableTransactionObject<{
      roleId: string;
      orgId: string;
      accessType: string;
      voter: boolean;
      admin: boolean;
      active: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
      5: boolean;
    }>;

    removeRole(
      _roleId: string,
      _orgId: string
    ): NonPayableTransactionObject<void>;

    roleExists(
      _roleId: string,
      _orgId: string,
      _ultParent: string
    ): NonPayableTransactionObject<boolean>;

    isAdminRole(
      _roleId: string,
      _orgId: string,
      _ultParent: string
    ): NonPayableTransactionObject<boolean>;

    roleAccess(
      _roleId: string,
      _orgId: string,
      _ultParent: string
    ): NonPayableTransactionObject<string>;

    transactionAllowed(
      _roleId: string,
      _orgId: string,
      _ultParent: string,
      _typeOfTxn: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isVoterRole(
      _roleId: string,
      _orgId: string,
      _ultParent: string
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    RoleCreated(cb?: Callback<RoleCreated>): EventEmitter;
    RoleCreated(
      options?: EventOptions,
      cb?: Callback<RoleCreated>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "RoleCreated", cb: Callback<RoleCreated>): void;
  once(
    event: "RoleCreated",
    options: EventOptions,
    cb: Callback<RoleCreated>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
