/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type VoterAdded = ContractEventLog<{
  _orgId: string;
  _vAccount: string;
  0: string;
  1: string;
}>;
export type VoterDeleted = ContractEventLog<{
  _orgId: string;
  _vAccount: string;
  0: string;
  1: string;
}>;
export type VotingItemAdded = ContractEventLog<{
  _orgId: string;
  0: string;
}>;
export type VoteProcessed = ContractEventLog<{
  _orgId: string;
  0: string;
}>;

export interface VoterManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VoterManager;
  clone(): VoterManager;
  methods: {
    getPendingOpDetails(_orgId: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    addVoter(
      _orgId: string,
      _vAccount: string
    ): NonPayableTransactionObject<void>;

    deleteVoter(
      _orgId: string,
      _vAccount: string
    ): NonPayableTransactionObject<void>;

    processVote(
      _authOrg: string,
      _vAccount: string,
      _pendingOp: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    addVotingItem(
      _authOrg: string,
      _orgId: string,
      _enodeId: string,
      _account: string,
      _pendingOp: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    VoterAdded(cb?: Callback<VoterAdded>): EventEmitter;
    VoterAdded(options?: EventOptions, cb?: Callback<VoterAdded>): EventEmitter;

    VoterDeleted(cb?: Callback<VoterDeleted>): EventEmitter;
    VoterDeleted(
      options?: EventOptions,
      cb?: Callback<VoterDeleted>
    ): EventEmitter;

    VotingItemAdded(cb?: Callback<VotingItemAdded>): EventEmitter;
    VotingItemAdded(
      options?: EventOptions,
      cb?: Callback<VotingItemAdded>
    ): EventEmitter;

    VoteProcessed(cb?: Callback<VoteProcessed>): EventEmitter;
    VoteProcessed(
      options?: EventOptions,
      cb?: Callback<VoteProcessed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "VoterAdded", cb: Callback<VoterAdded>): void;
  once(
    event: "VoterAdded",
    options: EventOptions,
    cb: Callback<VoterAdded>
  ): void;

  once(event: "VoterDeleted", cb: Callback<VoterDeleted>): void;
  once(
    event: "VoterDeleted",
    options: EventOptions,
    cb: Callback<VoterDeleted>
  ): void;

  once(event: "VotingItemAdded", cb: Callback<VotingItemAdded>): void;
  once(
    event: "VotingItemAdded",
    options: EventOptions,
    cb: Callback<VotingItemAdded>
  ): void;

  once(event: "VoteProcessed", cb: Callback<VoteProcessed>): void;
  once(
    event: "VoteProcessed",
    options: EventOptions,
    cb: Callback<VoteProcessed>
  ): void;
}
