/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type PermissionsInitialized = ContractEventLog<{
  _networkBootStatus: boolean;
  0: boolean;
}>;

export interface PermissionsImplementation extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PermissionsImplementation;
  clone(): PermissionsImplementation;
  methods: {
    updateAccountStatus(
      _orgId: string,
      _account: string,
      _action: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    addNewRole(
      _roleId: string,
      _orgId: string,
      _access: number | string | BN,
      _voter: boolean,
      _admin: boolean,
      _caller: string
    ): NonPayableTransactionObject<void>;

    setPolicy(
      _nwAdminOrg: string,
      _nwAdminRole: string,
      _oAdminRole: string
    ): NonPayableTransactionObject<void>;

    startBlacklistedAccountRecovery(
      _orgId: string,
      _account: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    updateOrgStatus(
      _orgId: string,
      _action: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    assignAdminRole(
      _orgId: string,
      _account: string,
      _roleId: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    updateNetworkBootStatus(): NonPayableTransactionObject<boolean>;

    connectionAllowed(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    approveBlacklistedAccountRecovery(
      _orgId: string,
      _account: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    getNetworkBootStatus(): NonPayableTransactionObject<boolean>;

    addAdminAccount(_account: string): NonPayableTransactionObject<void>;

    removeRole(
      _roleId: string,
      _orgId: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    addSubOrg(
      _pOrgId: string,
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    validateAccount(
      _account: string,
      _orgId: string
    ): NonPayableTransactionObject<boolean>;

    addAdminNode(
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN
    ): NonPayableTransactionObject<void>;

    approveAdminRole(
      _orgId: string,
      _account: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    assignAccountRole(
      _account: string,
      _orgId: string,
      _roleId: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    transactionAllowed(
      _sender: string,
      _target: string,
      _value: number | string | BN,
      _gasPrice: number | string | BN,
      _gasLimit: number | string | BN,
      _payload: string | number[]
    ): NonPayableTransactionObject<boolean>;

    isOrgAdmin(
      _account: string,
      _orgId: string
    ): NonPayableTransactionObject<boolean>;

    approveBlacklistedNodeRecovery(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    init(
      _breadth: number | string | BN,
      _depth: number | string | BN
    ): NonPayableTransactionObject<void>;

    approveOrgStatus(
      _orgId: string,
      _action: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    updateNodeStatus(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _action: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    getPolicyDetails(): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    isNetworkAdmin(_account: string): NonPayableTransactionObject<boolean>;

    startBlacklistedNodeRecovery(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    addOrg(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _account: string,
      _caller: string
    ): NonPayableTransactionObject<void>;

    addNode(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _caller: string
    ): NonPayableTransactionObject<void>;

    getPendingOp(_orgId: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    setMigrationPolicy(
      _nwAdminOrg: string,
      _nwAdminRole: string,
      _oAdminRole: string,
      _networkBootStatus: boolean
    ): NonPayableTransactionObject<void>;

    approveOrg(
      _orgId: string,
      _enodeId: string,
      _ip: string,
      _port: number | string | BN,
      _raftport: number | string | BN,
      _account: string,
      _caller: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    PermissionsInitialized(cb?: Callback<PermissionsInitialized>): EventEmitter;
    PermissionsInitialized(
      options?: EventOptions,
      cb?: Callback<PermissionsInitialized>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "PermissionsInitialized",
    cb: Callback<PermissionsInitialized>
  ): void;
  once(
    event: "PermissionsInitialized",
    options: EventOptions,
    cb: Callback<PermissionsInitialized>
  ): void;
}
