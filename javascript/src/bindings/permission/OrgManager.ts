/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OrgApproved = ContractEventLog<{
  _orgId: string;
  _porgId: string;
  _ultParent: string;
  _level: string;
  _status: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OrgPendingApproval = ContractEventLog<{
  _orgId: string;
  _porgId: string;
  _ultParent: string;
  _level: string;
  _status: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OrgSuspended = ContractEventLog<{
  _orgId: string;
  _porgId: string;
  _ultParent: string;
  _level: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OrgSuspensionRevoked = ContractEventLog<{
  _orgId: string;
  _porgId: string;
  _ultParent: string;
  _level: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface OrgManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OrgManager;
  clone(): OrgManager;
  methods: {
    updateOrg(
      _orgId: string,
      _action: number | string | BN
    ): NonPayableTransactionObject<string>;

    approveOrgStatusUpdate(
      _orgId: string,
      _action: number | string | BN
    ): NonPayableTransactionObject<void>;

    getUltimateParent(_orgId: string): NonPayableTransactionObject<string>;

    addSubOrg(
      _pOrgId: string,
      _orgId: string
    ): NonPayableTransactionObject<void>;

    checkOrgActive(_orgId: string): NonPayableTransactionObject<boolean>;

    getOrgInfo(_orgIndex: number | string | BN): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getSubOrgIndexes(_orgId: string): NonPayableTransactionObject<string[]>;

    getNumberOfOrgs(): NonPayableTransactionObject<string>;

    checkOrgStatus(
      _orgId: string,
      _orgStatus: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    setUpOrg(
      _orgId: string,
      _breadth: number | string | BN,
      _depth: number | string | BN
    ): NonPayableTransactionObject<void>;

    approveOrg(_orgId: string): NonPayableTransactionObject<void>;

    getOrgDetails(_orgId: string): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    addOrg(_orgId: string): NonPayableTransactionObject<void>;

    checkOrgExists(_orgId: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    OrgApproved(cb?: Callback<OrgApproved>): EventEmitter;
    OrgApproved(
      options?: EventOptions,
      cb?: Callback<OrgApproved>
    ): EventEmitter;

    OrgPendingApproval(cb?: Callback<OrgPendingApproval>): EventEmitter;
    OrgPendingApproval(
      options?: EventOptions,
      cb?: Callback<OrgPendingApproval>
    ): EventEmitter;

    OrgSuspended(cb?: Callback<OrgSuspended>): EventEmitter;
    OrgSuspended(
      options?: EventOptions,
      cb?: Callback<OrgSuspended>
    ): EventEmitter;

    OrgSuspensionRevoked(cb?: Callback<OrgSuspensionRevoked>): EventEmitter;
    OrgSuspensionRevoked(
      options?: EventOptions,
      cb?: Callback<OrgSuspensionRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OrgApproved", cb: Callback<OrgApproved>): void;
  once(
    event: "OrgApproved",
    options: EventOptions,
    cb: Callback<OrgApproved>
  ): void;

  once(event: "OrgPendingApproval", cb: Callback<OrgPendingApproval>): void;
  once(
    event: "OrgPendingApproval",
    options: EventOptions,
    cb: Callback<OrgPendingApproval>
  ): void;

  once(event: "OrgSuspended", cb: Callback<OrgSuspended>): void;
  once(
    event: "OrgSuspended",
    options: EventOptions,
    cb: Callback<OrgSuspended>
  ): void;

  once(event: "OrgSuspensionRevoked", cb: Callback<OrgSuspensionRevoked>): void;
  once(
    event: "OrgSuspensionRevoked",
    options: EventOptions,
    cb: Callback<OrgSuspensionRevoked>
  ): void;
}
