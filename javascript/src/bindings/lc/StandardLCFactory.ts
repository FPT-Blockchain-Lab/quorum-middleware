/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewStandardLC = ContractEventLog<{
  documentID: string;
  creator: string;
  lcContractAddr: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StandardLCFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StandardLCFactory;
  clone(): StandardLCFactory;
  methods: {
    amend(
      _executor: string,
      _documentId: number | string | BN,
      _parties: string[]
    ): NonPayableTransactionObject<string>;

    create(
      _parties: string[],
      _content: [
        string | number[],
        number | string | BN,
        string | number[],
        number | string | BN,
        (string | number[])[],
        string,
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<string>;

    getLCAddress(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    management(): NonPayableTransactionObject<string>;

    setLCManagement(_management: string): NonPayableTransactionObject<void>;
  };
  events: {
    NewStandardLC(cb?: Callback<NewStandardLC>): EventEmitter;
    NewStandardLC(
      options?: EventOptions,
      cb?: Callback<NewStandardLC>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewStandardLC", cb: Callback<NewStandardLC>): void;
  once(
    event: "NewStandardLC",
    options: EventOptions,
    cb: Callback<NewStandardLC>
  ): void;
}
