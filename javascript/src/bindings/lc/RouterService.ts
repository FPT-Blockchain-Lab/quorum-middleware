/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface RouterService extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RouterService;
  clone(): RouterService;
  methods: {
    approve(
      _documentId: number | string | BN,
      _stage: number | string | BN,
      _subStage: number | string | BN,
      _content: [
        string | number[],
        number | string | BN,
        string | number[],
        number | string | BN,
        (string | number[])[],
        string,
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<void>;

    approveAmendment(
      _documentId: number | string | BN,
      _requestId: number | string | BN,
      _signature: string | number[]
    ): NonPayableTransactionObject<void>;

    closeLC(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<void>;

    fulfillAmendment(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAddress(_documentId: number | string | BN): NonPayableTransactionObject<{
      _contract: string;
      _lcType: string;
      0: string;
      1: string;
    }>;

    getAmendmentCount(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<{
      _totalAmendment: string;
      _numOfRootAmendment: string;
      0: string;
      1: string;
    }>;

    getAmendmentRequest(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string[],
        [
          string,
          string,
          [string, string, string, string, string[], string, string, string]
        ],
        string[],
        string,
        boolean
      ]
    >;

    getInvolvedParties(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getLCStatus(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getRootHash(
      _documentId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getStageContent(
      _documentId: number | string | BN,
      _stage: number | string | BN,
      _subStage: number | string | BN
    ): NonPayableTransactionObject<
      [string, string, string, string, string[], string, string, string]
    >;

    isAmendApproved(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    management(): NonPayableTransactionObject<string>;

    setLCManagement(_management: string): NonPayableTransactionObject<void>;

    submitAmendment(
      _documentId: number | string | BN,
      _migratingStages: (string | number[])[],
      _amendStage: [
        number | string | BN,
        number | string | BN,
        [
          string | number[],
          number | string | BN,
          string | number[],
          number | string | BN,
          (string | number[])[],
          string,
          string | number[],
          string | number[]
        ]
      ],
      _signature: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
