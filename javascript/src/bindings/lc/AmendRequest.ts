/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ApprovedAmendment = ContractEventLog<{
  documentId: string;
  requestId: string;
  approver: string;
  0: string;
  1: string;
  2: string;
}>;
export type SubmittedAmendment = ContractEventLog<{
  proposer: string;
  documentId: string;
  nonce: string;
  requestId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface AmendRequest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AmendRequest;
  clone(): AmendRequest;
  methods: {
    approve(
      _documentId: number | string | BN,
      _requestId: number | string | BN,
      _approver: string,
      _signature: string | number[]
    ): NonPayableTransactionObject<void>;

    fulfilled(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAmendRequest(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string[],
        [
          string,
          string,
          [string, string, string, string, string[], string, string, string]
        ],
        string[],
        string,
        boolean
      ]
    >;

    isApproved(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isFulfilled(
      _documentId: number | string | BN,
      _requestId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isProposer(
      _documentId: number | string | BN,
      _requestId: number | string | BN,
      _executor: string
    ): NonPayableTransactionObject<boolean>;

    management(): NonPayableTransactionObject<string>;

    nonces(arg0: string): NonPayableTransactionObject<string>;

    orgApprovedSig(
      arg0: number | string | BN,
      arg1: number | string | BN,
      arg2: number | string | BN
    ): NonPayableTransactionObject<string>;

    setLCManagement(_management: string): NonPayableTransactionObject<void>;

    submit(
      _documentId: number | string | BN,
      _proposer: string,
      _migratingStages: (string | number[])[],
      _amendStage: [
        number | string | BN,
        number | string | BN,
        [
          string | number[],
          number | string | BN,
          string | number[],
          number | string | BN,
          (string | number[])[],
          string,
          string | number[],
          string | number[]
        ]
      ],
      _signature: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ApprovedAmendment(cb?: Callback<ApprovedAmendment>): EventEmitter;
    ApprovedAmendment(
      options?: EventOptions,
      cb?: Callback<ApprovedAmendment>
    ): EventEmitter;

    SubmittedAmendment(cb?: Callback<SubmittedAmendment>): EventEmitter;
    SubmittedAmendment(
      options?: EventOptions,
      cb?: Callback<SubmittedAmendment>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ApprovedAmendment", cb: Callback<ApprovedAmendment>): void;
  once(
    event: "ApprovedAmendment",
    options: EventOptions,
    cb: Callback<ApprovedAmendment>
  ): void;

  once(event: "SubmittedAmendment", cb: Callback<SubmittedAmendment>): void;
  once(
    event: "SubmittedAmendment",
    options: EventOptions,
    cb: Callback<SubmittedAmendment>
  ): void;
}
